import{_ as s,o as a,c as n,a as e}from"./chunks/framework.9fab0263.js";const u=JSON.parse('{"title":"ref 和 React.js 中的 DOM 操作","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react-books/post-21.md","lastUpdated":1716978866000}'),o={name:"fe/react-books/post-21.md"},p=e(`<h1 id="ref-和-react-js-中的-dom-操作" tabindex="-1">ref 和 React.js 中的 DOM 操作 <a class="header-anchor" href="#ref-和-react-js-中的-dom-操作" aria-label="Permalink to &quot;ref 和 React.js 中的 DOM 操作&quot;">​</a></h1><blockquote><p>React.js 小书是一个开源、免费、专业、简单的 React.js 教程。</p></blockquote><p>在 React.js 当中你基本不需要和 DOM 直接打交道。React.js 提供了一系列的 <code>on*</code> 方法帮助我们进行事件监听，所以 React.js 当中不需要直接调用 <code>addEventListener</code> 的 DOM API；以前我们通过手动 DOM 操作进行页面更新（例如借助 jQuery），而在 React.js 当中可以直接通过 <code>setState</code> 的方式重新渲染组件，渲染的时候可以把新的 <code>props</code> 传递给子组件，从而达到页面更新的效果。</p><p>React.js 这种重新渲染的机制帮助我们免除了绝大部分的 DOM 更新操作，也让类似于 jQuery 这种以封装 DOM 操作为主的第三方的库从我们的开发工具链中删除。</p><p>但是 React.js 并不能完全满足所有 DOM 操作需求，有些时候我们还是需要和 DOM 打交道。比如说你想进入页面以后自动 focus 到某个输入框，你需要调用 <code>input.focus()</code> 的 DOM API，比如说你想动态获取某个 DOM 元素的尺寸来做后续的动画，等等。</p><p>React.js 当中提供了 <code>ref</code> 属性来帮助我们获取已经挂载的元素的 DOM 节点，你可以给某个 JSX 元素加上 <code>ref</code>属性：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">AutoFocusInput</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">componentDidMount</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">input</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">focus</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;font-style:italic;">input</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">input </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> input)</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AutoFocusInput</span><span style="color:#89DDFF;"> /&gt;,</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以看到我们给 <code>input</code> 元素加了一个 <code>ref</code> 属性，这个属性值是一个函数。当 <code>input</code> 元素在页面上挂载完成以后，React.js 就会调用这个函数，并且把这个挂载以后的 DOM 节点传给这个函数。在函数中我们把这个 DOM 元素设置为组件实例的一个属性，这样以后我们就可以通过 <code>this.input</code> 获取到这个 DOM 元素。</p><p>然后我们就可以在 <code>componentDidMount</code> 中使用这个 DOM 元素，并且调用 <code>this.input.focus()</code> 的 DOM API。整体就达到了页面加载完成就自动 focus 到输入框的功能（大家可以注意到我们用上了 <code>componentDidMount</code> 这个组件生命周期）。</p><p>我们可以给任意代表 HTML 元素标签加上 <code>ref</code> 从而获取到它 DOM 元素然后调用 DOM API。但是记住一个原则：<em>能不用 <code>ref</code> 就不用</em>。特别是要避免用 <code>ref</code> 来做 React.js 本来就可以帮助你做到的页面自动更新的操作和事件监听。多余的 DOM 操作其实是代码里面的“噪音”，不利于我们理解和维护。</p><p>顺带一提的是，其实可以给组件标签也加上 <code>ref</code> ，例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Clock</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;font-style:italic;">clock</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">clock </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> clock)</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样你获取到的是这个 <code>Clock</code> 组件在 React.js 内部初始化的实例。但这并不是什么常用的做法，而且也并不建议这么做，所以这里就简单提及，有兴趣的朋友可以自己学习探索。</p><h2 id="课后练习" tabindex="-1">课后练习 <a class="header-anchor" href="#课后练习" aria-label="Permalink to &quot;课后练习&quot;">​</a></h2><ul><li><a target="_blank" href="http://scriptoj.com/problems/11">获取文本的高度</a></li></ul><hr><ul style="font-size:14px;margin-top:-10px;"><li> 作者：<a href="https://www.zhihu.com/people/hu-zi-da-ha" target="_blank">胡子大哈</a></li><li> 原文链接：<a href="http://huziketang.com/books/react"> http://huziketang.com/books/react </a></li></ul>`,17),l=[p];function t(c,r,i,D,d,y){return a(),n("div",null,l)}const B=s(o,[["render",t]]);export{u as __pageData,B as default};
